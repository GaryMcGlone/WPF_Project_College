using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.IO;
using Newtonsoft.Json;

namespace project
{
    /// <summary>
    /// 1. Create A Team by typing a name in the correct textbox and clicking Create Team
    /// 1. When You Click Create Team that TeamName will be displayed at the top of the listbox
    /// 1. Only one Team can be created and that team has a List of players which will be displayed in the listbox titled 'Football Team'
    /// 
    /// 2. Add Players to a team by typing a name in the correct textbox and selecting the PlayerType from the combobox, then click Add Player
    /// 
    /// 3. Selecting a player will display that players stats in the textbox titles Stats
    /// 3. Those stats are generated by the Stats class and each players has a PlayerStats property in the Player Class 
    /// </summary>
    public partial class MainWindow : Window
    {
        //A List of players to be displayed in the listbox
        static List<Player> players = new List<Player>();

        //Creating the team object here and only passing a list
        //Using overloaded construct that will create the object with only the list then adding a name to the object in a different method
        //doing this so I can access this object and write it to a file in a different method
        Team team = new Team(players);

        public MainWindow()
        {
            InitializeComponent();
        }
        public void Window_Loaded(object sender, RoutedEventArgs e)
        {
            //Adding options to the combobox on window loaded
            string[] options = { "Starter", "Substitute" };
            cbxPlayerType.ItemsSource = options;
            cbxPlayerType.SelectedIndex = 0;

            //This will get the JSON Files and display them in the combobox so you can load in teams that you previously created and saved
            //
            // To do - Make it show the team name in the combobox, not the filepath and filename
            //
            string[] teamList = Directory.GetFiles(@"C: \Users\garym\Documents\project\project\Saved_Teams\", "*.json");

            foreach (string file in teamList)
            {
                cbxTeams.Items.Add(file);
            }
        }
        private void btnAddPlayers_Click(object sender, RoutedEventArgs e)
        {
            //Limits for a team, it can only have 11 starting players and 7 subs
            const int STARTING_11 = 11, TEAM_LIMIT = 18;
            //Stats object will generate random stats for each player that's created once passed to the constructor
            Stats stats = new Stats();

            //if starter is selected in the combobox create a starting player
            if (tbxPlayerName.Text != "" && tbxTeamName.Text != "" && cbxPlayerType.Text == "Starter")
            {
                if (players.Count < STARTING_11)
                {
                    //Creating a player and sending the values of the textbox and combobox to the constructor, along with the StatList
                    Starter AddPlayer = new Starter(tbxPlayerName.Text, stats);
                    players.Add(AddPlayer);

                    //Clearing the list then adding the players to the list
                    lbxTeam.ItemsSource = "";
                    lbxTeam.ItemsSource = players;
                }
            }
            // if the substitute combobox option is selected then create a substitute player
            else if (tbxPlayerName.Text != "" && tbxTeamName.Text != "" && cbxPlayerType.Text == "Substitute")
            {
                if (players.Count < TEAM_LIMIT)
                {
                    Substitute AddPlayer = new Substitute(tbxPlayerName.Text, stats);
                    players.Add(AddPlayer);

                    //Clearing the list then adding the players to the list
                    lbxTeam.ItemsSource = "";
                    lbxTeam.ItemsSource = team.Players;
                }
            }
            //Clearing the textbox and then bring focus back to the textbox, making it easier to add players
            tbxPlayerName.Text = "";
            tbxPlayerName.Focus();
        }
        //The team object is already created at class level but here I gave the team a name
        // I initialized the team at class level so that I could write the team object to a json file
        private void btnCreateTeam_Click(object sender, RoutedEventArgs e)
        {
            if (tbxTeamName.Text != "")
            {
                //When you click 'Create Team' button it will create this team then add the team name to the top of the Player listbox
                team = new Team(tbxTeamName.Text, players);
                txblkTeamName.Text = team.TeamName;
            }
        }
        //Method displays stats for the selected player
        private void lbxTeam_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Player selectedPlayer = lbxTeam.SelectedItem as Player;

            if (selectedPlayer != null)
            {
                textblockStats.Text = "";
                textblockStats.Text = selectedPlayer.PlayerStats.ToString();
                txblkPlayerName.Text = selectedPlayer.Name;
            }
        }
        //method sorts list by name ascending
        private void btnSortAZ_Click(object sender, RoutedEventArgs e)
        {
            players.Sort();
            lbxTeam.ItemsSource = "";
            lbxTeam.ItemsSource = team.Players;
        }
        //Method sorts list by name descending
        private void btnSortZA_Click(object sender, RoutedEventArgs e)
        {
            players.Sort();
            players.Reverse();
            lbxTeam.ItemsSource = "";
            lbxTeam.ItemsSource = team.Players;
        }
        //Method to clear everything so you can create another team
        private void btnClear_Click(object sender, RoutedEventArgs e)
        {
            textblockStats.Text = "";
            txblkPlayerName.Text = "";
            txblkTeamName.Text = "";
            lbxTeam.ItemsSource = null;
        }
        //Clicking save will store the current team in a json file which you can then view
        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            string path = @"C:\Users\garym\Documents\project\project\Saved_Teams\";
            string fileName = tbxTeamName.Text + ".json";

            if (lbxTeam.ItemsSource != null)
            {
                dynamic json = JsonConvert.SerializeObject(team, Formatting.Indented);
                using (StreamWriter w = new StreamWriter(path + fileName))
                {
                    w.Write(json);
                }
            }
        }
        private void cbxTeams_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            string[] files = Directory.GetFiles(@"C:\Users\garym\Documents\project\project\Saved_Teams\", "*.json");

            //Team temp = cbxTeams.SelectedItem as Team;

            StreamReader r = new StreamReader();
            string json = r.ReadToEnd();
            Team team = JsonConvert.DeserializeObject<Team>(json);

            //Updating the gui with the deserialized team object
            txblkTeamName.Text = "";
            lbxTeam.ItemsSource = null;

            txblkTeamName.Text = team.TeamName;
            lbxTeam.ItemsSource = team.Players;
            r.Dispose();
        }
    }
}