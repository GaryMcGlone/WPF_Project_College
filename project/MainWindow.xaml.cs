using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.IO;
using Newtonsoft.Json;
using System.Collections.ObjectModel;

namespace project
{
    /// <summary>
    /// 1. Create A Team by typing a name in the correct textbox and clicking Create Team
    /// 1. When You Click Create Team that TeamName will be displayed at the top of the listbox
    /// 1. Only one Team can be created and that team has a List of players which will be displayed in the listbox titled 'Football Team'
    /// 
    /// 2. Add Players to a team by typing a name in the correct textbox and selecting the PlayerType from the combobox, then click Add Player
    /// 
    /// 3. Selecting a player will display that players stats in the textbox titles Stats
    /// 3. Those stats are generated by the Stats class and each players has a PlayerStats property in the Player Class 
    /// 
    /// 4. You can then save that team and it will appear in the combobox labelled 'Load Teams'
    /// 4. 'Load Teams' will allow you to reload any team which you have saved
    /// </summary>
    public partial class MainWindow : Window
    {
        //A List of players to be displayed in the listbox
        //static List<Player> players = new List<Player>();
        static ObservableCollection<Player> players = new ObservableCollection<Player>();

        //Creating the team object here and only passing a list
        //Using overloaded constructor that will create the object with only the list then adding a name to the object in a different method
        //doing this so I can access this object and write it to a file in a different method
        Team team = new Team(players);

        //consts for file path and search pattern becuase they're used in multiple methods
        const string SEARCH_PATTERN = "*.json";
        const string FILE_PATH = @"C:\Users\garym\Documents\project\project\Saved_Teams\";

        public MainWindow()
        {
            InitializeComponent();
        }
        public void Window_Loaded(object sender, RoutedEventArgs e)
        {
            //Adding options to the combobox on window loaded
            string[] options = { "Starter", "Substitute" };
            cbxPlayerType.ItemsSource = options;
            cbxPlayerType.SelectedIndex = 0;

            //ObservableCollection<string[]> filesList = GetFilesWithoutExtension();

            #region Getting files names with the extension
            //This will get the JSON Files and display them in the combobox so you can load in teams that you previously created and saved
            //
            // To do - Make it show the team name in the combobox, not the filepath and filename
            //       now showing filename.json might try get rid of .json extension
            //
            //ObservableCollection<string[]> filesList = new ObservableCollection<string[]>();
            //string[] filesList = Directory.GetFiles(@"C:\Users\garym\Documents\project\project\Saved_Teams\", "*.json");
            //foreach (string file in filesList)
            //{
            //    cbxTeams.Items.Add(new FileInfo(file).Name);
            //}
            #endregion Getting files names with the extension 
        }
        //public ObservableCollection<string[]> GetFilesWithoutExtension()
        //{ 
        //    ObservableCollection<string[]> files = new ObservableCollection<string[]>();
        //    string[] allFiles = Directory.GetFiles(FILE_PATH, SEARCH_PATTERN);

        //    for (int i = 0; i < files.Count; i++)
        //    {
        //        string file = Path.GetFileNameWithoutExtension(allFiles);
        //        files.Add(file);
        //        cbxTeams.Items.Add(files);
        //    }
        //    return files;
        //}
        private void btnAddPlayers_Click(object sender, RoutedEventArgs e)
        {
            //Limits for a team, it can only have 11 starting players and 7 subs
            const int STARTING_11 = 11, TEAM_LIMIT = 18;

            if ((tbxPlayerName.Text != "") && (tbxTeamName.Text != ""))
            {
                if ((cbxPlayerType.Text == "Starter") && (players.Count < STARTING_11))
                {
                    players.Add(CreateStarter());
                    lbxTeam.ItemsSource = players;
                }
                else if ((cbxPlayerType.Text == "Substitute") && (players.Count < TEAM_LIMIT))
                {
                    players.Add(CreateSubstitute());
                    lbxTeam.ItemsSource = players;
                }
            }
            tbxPlayerName.Text = "";
            tbxPlayerName.Focus();
        }
        private Starter CreateStarter()
        {
            Stats stats = new Stats();
            Starter player = new Starter(tbxPlayerName.Text, stats);
            return player;
        }
        private Substitute CreateSubstitute()
        {
            Stats stats = new Stats();
            Substitute player = new Substitute(tbxPlayerName.Text, stats);
            return player;
        }
        //The team object is already created at class level but here I gave the team a name
        private void btnCreateTeam_Click(object sender, RoutedEventArgs e)
        {
            if (tbxTeamName.Text != "")
            {
                //When you click 'Create Team' button it will create this team then add the team name to the top of the Player listbox
                team = new Team(tbxTeamName.Text, players);
                txblkTeamName.Text = team.TeamName;
            }
        }
        //Method displays stats for the selected player
        private void lbxTeam_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Player selectedPlayer = lbxTeam.SelectedItem as Player;

            if (selectedPlayer != null)
            {
                textblockStats.Text = "";
                textblockStats.Text = selectedPlayer.PlayerStats.ToString();
                txblkPlayerName.Text = selectedPlayer.Name;
            }
        }
        //The next 2 methods are for sort the players in the listbox
        private void btnSortAZ_Click(object sender, RoutedEventArgs e)
        {

            lbxTeam.ItemsSource = players;
        }
        private void btnSortZA_Click(object sender, RoutedEventArgs e)
        {

            players.Reverse();
            lbxTeam.ItemsSource = players;
        }
        //Method to clear everything so you can create another team
        private void btnClear_Click(object sender, RoutedEventArgs e)
        {
            textblockStats.Text = "";
            txblkPlayerName.Text = "";
            txblkTeamName.Text = "";
            lbxTeam.ItemsSource = null;
        }
        //Clicking save will store the current team in a json file which you can then view
        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            //Allows you to create a new file everytime you click save
            string fileName = tbxTeamName.Text + ".json";

            //making it so you cant save an empty team
            if ((lbxTeam.ItemsSource != null) && (team.TeamName != null))
            {
                dynamic json = JsonConvert.SerializeObject(team, Formatting.Indented);
                using (StreamWriter w = new StreamWriter(FILE_PATH + fileName))
                {
                    w.Write(json);
                }
            }
        }
        //Selecting a team from the combobox should load in that team object
        private void cbxTeams_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            string fileName = cbxTeams.SelectedItem as string;

            fileName = FILE_PATH + fileName;

            using (StreamReader r = new StreamReader(fileName))
            {
                string json = r.ReadToEnd();
                Team team = JsonConvert.DeserializeObject<Team>(json);

                txblkTeamName.Text = "";

                tbxTeamName.Text = team.TeamName;
                txblkTeamName.Text = team.TeamName;
                lbxTeam.ItemsSource = team.Players;

            }
        }
    }
}